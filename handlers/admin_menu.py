# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import MessageCantBeDeleted
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from modules.services import db, json_logic
from bot_telegram import dp
from modules.keyboards import  reply_admin, inline_page, inline_user, inline_admin
from contextlib import suppress
from modules.utils.check_func import CheckAdmin
from handlers import start_user
from bot_telegram import bot

@dp.message_handler(CheckAdmin(), text = '/admin', state = "*")
async def admin_menu(message: Message, state: FSMContext):
    await message.answer("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω –º–µ–Ω—é</b>", reply_markup=reply_admin.menu_admin())


@dp.message_handler(CheckAdmin(), text = 'üßë‚Äç‚úàÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä—ã', state = "*")
async def admin_menu_start(message: Message, state: FSMContext):
    await message.answer("<b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>", reply_markup=reply_admin.admin__edit_selected())


@dp.message_handler(CheckAdmin(), text = '–î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', state = "*")
async def admin_edit_menu(message: Message, state: FSMContext):

    await message.answer("<b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ <code>—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code>, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ê–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä—ã, –≤ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º</b>", reply_markup=reply_admin.admin_back())
    await state.set_state("add_admin")

@dp.message_handler(CheckAdmin(), state = "add_admin")
async def add_admin(message: Message, state: FSMContext):
    if message.text in ['–ù–∞–∑–∞–¥']:
        await state.finish()
        await message.answer("<b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>", reply_markup=reply_admin.admin__edit_selected())

    else:
        try:
            user_id = message['forward_from']['id']
            if message['forward_from']['last_name'] == None:
                nickname = message['forward_from']['first_name']
            else:
                nickname = f"{message['forward_from']['first_name']} {message['forward_from']['last_name']}"

            result = json_logic.add_admin(user_id, nickname)
            if result:
                await message.answer("<b>–£—Å–ø–µ—à–Ω–æ üëç</b>\n"
                                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{nickname}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
                                     reply_markup=reply_admin.admin__edit_selected())

                await state.finish()

        except TypeError:
            await message.answer("<b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É! –ò–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π</b>", reply_markup=reply_admin.admin_back())

            await state.set_state("add_admin")

@dp.message_handler(CheckAdmin(), text = '–£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', state = "*")
async def admin_delete_admin(message: Message, state: FSMContext):
    await see_admin(message)
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ <code>ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</code>, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å üëÜ</b>", reply_markup=reply_admin.admin_back())

    await state.set_state("delete_admin")

@dp.message_handler(CheckAdmin(), text = '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', state = "*")
async def admin_exit_menu(message: Message, state: FSMContext):
    await message.answer("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω –º–µ–Ω—é</b>", reply_markup=reply_admin.menu_admin())

@dp.message_handler(CheckAdmin(), text = '–í—ã–π—Ç–∏ –∏–∑ –ê–¥–º–∏–Ω –º–µ–Ω—é‚¨ÜÔ∏è', state = "*")
async def admin_exit(message: Message, state: FSMContext):
    await state.finish()
    await message.answer("–£—Å–ø–µ—à–Ω–æ üëç", reply_markup=None)





@dp.message_handler(CheckAdmin(), state = "delete_admin")
async def admin_delete_admin(message: Message, state: FSMContext):

    if message.text in ['–ù–∞–∑–∞–¥']:
        await state.finish()
        await message.answer("<b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>", reply_markup=reply_admin.admin__edit_selected())

    else:
        admins = json_logic.see_admins()
        user_ids = []
        for character in admins:
            user_ids.append(character['user_id'])
        try:
            if int(message.text) in user_ids:
                json_logic.remove_admin(message.text)
                await message.answer("<b>–£—Å–ø–µ—à–Ω–æ üëç</b>", reply_markup=reply_admin.admin__edit_selected())

                await state.finish()

            else:
                await message.answer("<b>ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>", reply_markup=reply_admin.admin_back())

                await state.set_state("delete_admin")
        except ValueError:
            await message.answer("<b>ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>",reply_markup=reply_admin.admin_back())

            await state.set_state("delete_admin")


@dp.message_handler(CheckAdmin(), text = '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', state = "*")
async def admin_see_admins(message: Message, state: FSMContext):
    await see_admin(message)

async def see_admin(message):
    admins = json_logic.see_admins()
    text = ''
    if admins:
        for character in admins:
            text += f"<b>#{character['position']}  {character['nickname']} || <code>{character['user_id']}</code></b>\n"
    await message.answer(f"<b>–ò–ú–Ø ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ ID</b>\n{text}")


@dp.message_handler(text = '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ª–∏—Ü. —Å–æ–≥–ª–∞—à–µ–Ω–∏—è', state = "*")
async def edit_texts(message: Message, state: FSMContext):
    await state.set_state("change_texts")
    await message.answer("<b>‚öí –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:</b>", reply_markup=reply_admin.admin__edit_texts())



@dp.message_handler(state = "change_texts")
async def get_category(message: Message, state: FSMContext):
    text_category = message.text

    await state.set_state("change_text_final")

    if text_category == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        message_text = json_logic.get_texts(f"licensing_agreement_ru")
        await state.update_data(text_category=f"licensing_agreement_ru")

    elif text_category == "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
        message_text = json_logic.get_texts(f"licensing_agreement_eng")
        await state.update_data(text_category= f"licensing_agreement_eng")

    with suppress(MessageCantBeDeleted):
        await message.delete()


    await message.answer(f"<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞!</b>\n–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç —Ç–∞–∫–æ–≤: \n\n<i>{message_text}</i>", reply_markup = reply_admin.admin__edit_texts_cancel())


@dp.message_handler(state = "change_text_final")
async def edit_texts_selected(message: Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await start_user.user_menu(message)
    else:
        async with state.proxy() as data:
            text_category = data['text_category']
        json_logic.update_texts(text_category, message.text)
        await state.finish()
        await message.answer("–£—Å–ø–µ—à–Ω–æ!", reply_markup = reply_admin.menu_admin())


